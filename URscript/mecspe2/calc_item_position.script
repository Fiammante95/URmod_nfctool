def calc_item_position(item, prop, grid, module, seat, compens):

    # calcola la posizione assoluta del pezzo scelto da pickPalletItem

    # nPosX è il numero di colonne
    # nPosY è il numero di righe
    # distX è la distanza tra colonne
    # distY è la distanza tra righe
    # [posX1, posY1] è la posizione del primo pezzo rispetto all'origine del pallet

    nPallet = module # module e seat partono da 1
    nItem = seat

    nPosXgrid = grid[0] # numero di posizioni della giglia in X
    distXgrid = grid[2] # distanza tra gli slot della griglia in X
    distYgrid = grid[3] # distanza tra gli slot della griglia in Y

    pallPosX = nPallet%nPosXgrid
    if(pallPosX==0): pallPosX = nPosXgrid end
    pallPosY = ceil(nPallet/nPosXgrid)

    pallPosX1 = grid[4]
    pallPosY1 = grid[5]
    

    nPosX = prop[item,0]
    nPosY = prop[item,1]
    distX = prop[item,2]
    distY = prop[item,3]
    posX1 = prop[item,4]
    posY1 = prop[item,5] 

    posX = nItem%nPosX
    if(posX==0): posX = nPosX end
    posY = ceil(nItem/nPosX)

    position = p[0,0,0,0,0,0]

    X=distX*(posX - 1) + posX1 + distXgrid*(pallPosX - 1) + pallPosX1 + compens[0]*1000
    Y=distY*(posY - 1) + posY1 + distYgrid*(pallPosY - 1) + pallPosY1 + compens[1]*1000
  
    position[0] = X/1000
    position[1] = Y/1000

    return position
  
 end