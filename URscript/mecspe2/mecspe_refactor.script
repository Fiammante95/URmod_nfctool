def mecspe_refactor():
  step_count_55f81367_ec5e_4dfe_aa3c_6708586ea5ef = 0.0
  thread Step_Counter_Thread_57d29c5d_9163_4b83_b697_f105cdff3222():
    while (True):
      step_count_55f81367_ec5e_4dfe_aa3c_6708586ea5ef = step_count_55f81367_ec5e_4dfe_aa3c_6708586ea5ef + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_57d29c5d_9163_4b83_b697_f105cdff3222()
  set_gravity([8.503688472232543E-16, 6.943788591251896, 6.943788591251898])
  set_tool_voltage(0)
  set_tcp(p[0.0475,0.0,0.045,0.0,0.0,0.0])
  set_payload(2.1)
  set_safety_mode_transition_hardness(1)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 0)
  set_tool_analog_input_domain(1, 0)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  global Piano_Carrello=p[0.15738038194676504,0.34804679499613556,-0.10180660081110104,-0.604770547029434,0.6135130099633843,1.4699264996051509]
  global Piano_Inclinato=p[0.24163290852284977,0.484348843812812,-0.08183038406600258,-0.13450397856501406,0.1337107555826035,1.5511152546959441]
  global piano_moduli=p[0.13993944179688836,0.3246186948043025,-0.2543011639693953,-0.6047704836459776,0.6135130132010319,1.4699264397811034]
  global ghr=2
  global nCycle=0
  global pallStocks=[16,16,16,40,16,16,16,40,16,16,16,40,16,40,0,0,0,0,0,0,0,0,0,0]
  global pick=[0,0]
  global timer_1=0
  global timer_1_is_counting=False
  thread Timer_Thread():
    while (True):
      if (timer_1_is_counting):
        timer_1 = timer_1 + get_steptime()
      end
      sync()
    end
  end
  run Timer_Thread()
  def prel_ghr_pall():
    $ 65 "prel_ghr_pall" "noBreak"
    $ 66 "If apprendimento≟ True "
    if (apprendimento ==   True  ):
      $ 67 "MoveJ"
      $ 68 "appr_pall_ghr" "breakAfter"
      set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
      movej(get_inverse_kin(p[.141508430620, .430186145797, -.147750446182, .607032135491, -1.488165124152, -.629298923675], qnear=[-2.194843747757993, -0.6849316429477064, 1.4166243930013713, -0.7323936147265329, -0.6033701630599886, 0.7824557991326886]), a=1.3962634015954636, v=1.0471975511965976)
      $ 69 "modulo≔'Specificare il numero di modulo usato per l'apprendimento'"
      global modulo=request_integer_from_primary_client("Specificare il numero di modulo usato per l'apprendimento")
    else:
      $ 70 "Else" "noBreak"
      $ 71 "MoveJ"
      $ 72 "posApproccio = pose_trasf(posa, riferimento, vettore)"
      posApproccio = pose_trasf(posa, riferimento, vettore)
      $ 73 "posApproccio" "breakAfter"
      set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
      movej(posApproccio, a=1.3962634015954636, v=1.0471975511965976)
    end
    $ 74 "MoveL"
    $ 75 "Waypoint_1" "breakAfter"
    set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
    movel(pose_add(get_forward_kin(), pose_sub(p[.143457278955, .501954570815, -.000687299247, .607031477405, -1.488165382594, -.629299479893], p[.143960646310, .537138803247, .034834734639, .607031676191, -1.488165191779, -.629299098769])), a=1.2, v=0.25)
    $ 76 "MoveL"
    $ 77 "Waypoint_2" "breakAfter"
    set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
    movel(pose_add(get_forward_kin(), pose_sub(p[.143286051621, .489991982615, -.012764771925, .607031558026, -1.488165407877, -.629299497897], p[.143457278955, .501954570815, -.000687299247, .607031477405, -1.488165382594, -.629299479893])), a=0.1, v=0.05)
    $ 79 "Waypoint_3" "breakAfter"
    set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
    movel(pose_add(get_forward_kin(), pose_sub(p[.143457278955, .501954570815, -.000687299247, .607031477405, -1.488165382594, -.629299479893], p[.143286051621, .489991982615, -.012764771925, .607031558026, -1.488165407877, -.629299497897])), a=0.1, v=0.05)
    $ 80 "MoveL"
    $ 81 "Waypoint_4" "breakAfter"
    set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
    movel(pose_add(get_forward_kin(), pose_sub(p[.143960608794, .537138832803, .034834711840, .607031235418, -1.488165333117, -.629299407927], p[.143457278955, .501954570815, -.000687299247, .607031477405, -1.488165382594, -.629299479893])), a=1.2, v=0.25)
  end
  def prel_ghr_col():
    $ 82 "prel_ghr_col" "noBreak"
    $ 83 "If apprendimento≟ True "
    if (apprendimento ==   True  ):
      $ 84 "MoveJ"
      $ 85 "appr_pall_ghr" "breakAfter"
      set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
      movej(get_inverse_kin(p[.141508430620, .430186145797, -.147750446182, .607032135491, -1.488165124152, -.629298923675], qnear=[-2.194843747757993, -0.6849316429477064, 1.4166243930013713, -0.7323936147265329, -0.6033701630599886, 0.7824557991326886]), a=1.3962634015954636, v=1.0471975511965976)
    else:
      $ 86 "Else" "noBreak"
      $ 87 "MoveJ"
      $ 89 "posApproccio" "breakAfter"
      set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
      movej(posApproccio, a=1.3962634015954636, v=1.0471975511965976)
    end
    $ 90 "MoveL"
    $ 91 "Waypoint_1" "breakAfter"
    set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
    movel(pose_add(get_forward_kin(), pose_sub(p[.143457278955, .501954570815, -.000687299247, .607031477405, -1.488165382594, -.629299479893], p[.143960646310, .537138803247, .034834734639, .607031676191, -1.488165191779, -.629299098769])), a=1.2, v=0.25)
    $ 92 "MoveL"
    $ 93 "Waypoint_2" "breakAfter"
    set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
    movel(pose_add(get_forward_kin(), pose_sub(p[.143286051621, .489991982615, -.012764771925, .607031558026, -1.488165407877, -.629299497897], p[.143457278955, .501954570815, -.000687299247, .607031477405, -1.488165382594, -.629299479893])), a=0.1, v=0.05)
    $ 95 "Waypoint_3" "breakAfter"
    set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
    movel(pose_add(get_forward_kin(), pose_sub(p[.143457278955, .501954570815, -.000687299247, .607031477405, -1.488165382594, -.629299479893], p[.143286051621, .489991982615, -.012764771925, .607031558026, -1.488165407877, -.629299497897])), a=0.1, v=0.05)
    $ 96 "MoveL"
    $ 97 "Waypoint_4" "breakAfter"
    set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
    movel(pose_add(get_forward_kin(), pose_sub(p[.143960608794, .537138832803, .034834711840, .607031235418, -1.488165333117, -.629299407927], p[.143457278955, .501954570815, -.000687299247, .607031477405, -1.488165382594, -.629299479893])), a=1.2, v=0.25)
  end
  def prel_chp_pall():
    $ 98 "prel_chp_pall" "noBreak"
    $ 99 "If apprendimento≟ True "
    if (apprendimento ==   True  ):
      $ 100 "MoveJ"
      $ 101 "tcp_ventosaX" "breakAfter"
      set_tcp(p[0.0475,0.0,0.045,0.0,0.0,0.0])
      movej(get_inverse_kin(p[.142441978580, .500566928693, -.076684548179, 1.762214619710, -.739669585744, -1.772544720268], qnear=[-2.2291505972491663, -0.6654294172870081, 1.53663969039917, -0.8705576101886194, -0.638655964528219, -0.7893994490252894]), a=1.3962634015954636, v=1.0471975511965976)
    else:
      $ 102 "Else" "noBreak"
      $ 103 "MoveJ"
      $ 105 "posApproccio" "breakAfter"
      set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
      movej(posApproccio, a=1.3962634015954636, v=1.0471975511965976)
    end
    $ 106 "MoveL"
    $ 107 "Punto_percor_22" "breakAfter"
    set_tcp(p[0.0475,0.0,0.045,0.0,0.0,0.0])
    movel(pose_add(get_forward_kin(), pose_sub(p[.033406722244, .563018385882, -.390380137655, 1.785457859685, -.733868522970, -1.771169622781], p[.035118279865, .689646245178, -.262532044881, 1.785274763573, -.733867490988, -1.770996114351])), a=1.0, v=0.25)
    $ 108 "MoveL"
    $ 109 "Set DO_ventosaOff=Off"
    set_standard_digital_out(1, False)
    $ 110 "Set DO_ventosaOn=On"
    set_standard_digital_out(0, True)
    $ 111 "Punto_percor_24" "breakAfter"
    set_tcp(p[0.0475,0.0,0.045,0.0,0.0,0.0])
    movel(pose_add(get_forward_kin(), pose_sub(p[.033330234424, .555287280666, -.398137481315, 1.785553440915, -.733780883910, -1.771232068736], p[.033415001467, .563016592516, -.390375902229, 1.785472462686, -.733850377308, -1.771164548201])), a=0.1, v=0.1)
    $ 112 "Wait: 2.0"
    sleep(2.0)
    $ 113 "Punto_percor_25" "breakAfter"
    set_tcp(p[0.0475,0.0,0.045,0.0,0.0,0.0])
    movel(pose_add(get_forward_kin(), pose_sub(p[.033498977513, .565846465093, -.387471609775, 1.785644315187, -.733584217405, -1.771131691467], p[.033325484735, .555289252142, -.398146806297, 1.785599931386, -.733655199135, -1.771169106281])), a=0.1, v=0.1)
    $ 114 "If 1≟1"
    if (1 == 1):
      $ 115 "statoChip≔1"
      global statoChip=1
    end
    $ 116 "MoveL"
    $ 117 "Punto_percor_26" "breakAfter"
    set_tcp(p[0.0475,0.0,0.045,0.0,0.0,0.0])
    movel(pose_add(get_forward_kin(), pose_sub(p[.035219967081, .689620140468, -.262535305967, 1.785529415174, -.733702332389, -1.771103089711], p[.033483767662, .565887669071, -.387461724716, 1.785698424465, -.733646598385, -1.771234731617])), a=1.2, v=0.25)
  end
  def depo_ghr_pall():
    $ 118 "depo_ghr_pall" "noBreak"
    $ 119 "If apprendimento≟ True "
    if (apprendimento ==   True  ):
      $ 120 "MoveJ"
      $ 121 "tcp_ventosaX" "breakAfter"
      set_tcp(p[0.0475,0.0,0.045,0.0,0.0,0.0])
      movej(get_inverse_kin(p[.142441978580, .500566928693, -.076684548179, 1.762214619710, -.739669585744, -1.772544720268], qnear=[-2.2291505972491663, -0.6654294172870081, 1.53663969039917, -0.8705576101886194, -0.638655964528219, -0.7893994490252894]), a=1.3962634015954636, v=1.0471975511965976)
    else:
      $ 122 "Else" "noBreak"
      $ 123 "MoveJ"
      $ 125 "posApproccio" "breakAfter"
      set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
      movej(posApproccio, a=1.3962634015954636, v=1.0471975511965976)
    end
  end
  def depo_chp_pal():
    $ 126 "depo_chp_pal" "noBreak"
    $ 127 "If apprendimento≟ True "
    if (apprendimento ==   True  ):
      $ 128 "MoveJ"
      $ 129 "tcp_ventosaX" "breakAfter"
      set_tcp(p[0.0475,0.0,0.045,0.0,0.0,0.0])
      movej(get_inverse_kin(p[.142441978580, .500566928693, -.076684548179, 1.762214619710, -.739669585744, -1.772544720268], qnear=[-2.2291505972491663, -0.6654294172870081, 1.53663969039917, -0.8705576101886194, -0.638655964528219, -0.7893994490252894]), a=1.3962634015954636, v=1.0471975511965976)
    else:
      $ 130 "Else" "noBreak"
      $ 131 "MoveJ"
      $ 133 "posApproccio" "breakAfter"
      set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
      movej(posApproccio, a=1.3962634015954636, v=1.0471975511965976)
    end
    $ 134 "MoveL"
    $ 135 "Punto_percor_22" "breakAfter"
    set_tcp(p[0.0475,0.0,0.045,0.0,0.0,0.0])
    movel(pose_add(get_forward_kin(), pose_sub(p[.033406722244, .563018385882, -.390380137655, 1.785457859685, -.733868522970, -1.771169622781], p[.035118279865, .689646245178, -.262532044881, 1.785274763573, -.733867490988, -1.770996114351])), a=1.0, v=0.25)
    $ 136 "MoveL"
    $ 137 "Set DO_ventosaOff=On"
    set_standard_digital_out(1, True)
    $ 138 "Set DO_ventosaOn=Off"
    set_standard_digital_out(0, False)
    $ 139 "Punto_percor_24" "breakAfter"
    set_tcp(p[0.0475,0.0,0.045,0.0,0.0,0.0])
    movel(pose_add(get_forward_kin(), pose_sub(p[.033330234424, .555287280666, -.398137481315, 1.785553440915, -.733780883910, -1.771232068736], p[.033415001467, .563016592516, -.390375902229, 1.785472462686, -.733850377308, -1.771164548201])), a=0.1, v=0.1)
    $ 140 "Wait: 2.0"
    sleep(2.0)
    $ 141 "Punto_percor_25" "breakAfter"
    set_tcp(p[0.0475,0.0,0.045,0.0,0.0,0.0])
    movel(pose_add(get_forward_kin(), pose_sub(p[.033498977513, .565846465093, -.387471609775, 1.785644315187, -.733584217405, -1.771131691467], p[.033325484735, .555289252142, -.398146806297, 1.785599931386, -.733655199135, -1.771169106281])), a=0.1, v=0.1)
    $ 142 "MoveL"
    $ 143 "Punto_percor_26" "breakAfter"
    set_tcp(p[0.0475,0.0,0.045,0.0,0.0,0.0])
    movel(pose_add(get_forward_kin(), pose_sub(p[.035219967081, .689620140468, -.262535305967, 1.785529415174, -.733702332389, -1.771103089711], p[.033483767662, .565887669071, -.387461724716, 1.785698424465, -.733646598385, -1.771234731617])), a=1.2, v=0.25)
  end
  def seq_chp_ant():
    $ 144 "seq_chp_ant" "noBreak"
    $ 145 "If apprendimento≟ True "
    if (apprendimento ==   True  ):
      $ 146 "MoveJ"
      $ 147 "Punto_percors_9" "breakAfter"
      set_tcp(p[0.0475,0.0,0.045,0.0,0.0,0.0])
      movej(get_inverse_kin(p[.334201516403, .613623298758, -.237913709233, 1.761876086224, -.739799080521, -1.772663896258], qnear=[-2.333367594330193, 0.12544758930027344, 0.25487650934265105, -0.37990594147209933, -0.7455802306119708, -0.7885962700641969]), a=1.3962634015954636, v=1.0471975511965976)
    else:
      $ 148 "Else" "noBreak"
      $ 149 "MoveJ"
      $ 151 "posApproccio" "breakAfter"
      set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
      movej(posApproccio, a=1.3962634015954636, v=1.0471975511965976)
    end
    $ 152 "MoveL"
    $ 153 "Waypoint_5" "breakAfter"
    set_tcp(p[0.0475,0.0,0.045,0.0,0.0,0.0])
    movel(pose_add(get_forward_kin(), pose_sub(p[.333934126541, .593030059396, -.258696635925, 1.762040315113, -.739717552074, -1.772613020337], p[.334201516107, .613623317679, -.237913704828, 1.761876086657, -.739799212141, -1.772664174113])), a=0.1, v=0.05)
    $ 154 "If bypassVerifChp≟ True "
    if (bypassVerifChp ==   True  ):
      $ 155 "chp_check≔ True "
      global chp_check=  True  
    else:
      $ 156 "ElseIf DI_antennaOn≟ False "
      if (get_standard_digital_in(0) ==   False  ):
        $ 157 "chp_check≔'L'antenna nfc non risponde. Si prega di confermare la funzionalita' del sensore'"
        global chp_check=request_boolean_from_primary_client("L'antenna nfc non risponde. Si prega di confermare la funzionalita' del sensore")
      else:
        $ 158 "Else" "noBreak"
        $ 159 "Loop 5 times"
        Loop_1 = 0
        while (Loop_1 < 5):
          $ 160 "Wait: 0.5"
          sleep(0.5)
          $ 161 "If DI_chpVerif≟ True "
          if (get_standard_digital_in(1) ==   True  ):
            $ 162 "chp_check≔ True "
            global chp_check=  True  
          end
          Loop_1 = Loop_1 + 1
        end
      end
    end
    $ 163 "Waypoint_6" "breakAfter"
    set_tcp(p[0.0475,0.0,0.045,0.0,0.0,0.0])
    movel(pose_add(get_forward_kin(), pose_sub(p[.334201511596, .613623312927, -.237913699819, 1.761876051872, -.739799220241, -1.772664175260], p[.333934126541, .593030059396, -.258696635925, 1.762040315113, -.739717552074, -1.772613020337])), a=0.1, v=0.05)
  end
  def depo_ghr_col():
    $ 164 "depo_ghr_col" "noBreak"
    $ 165 "MoveJ"
    $ 166 "tcp_pinza_s" "breakAfter"
    set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
    movej(get_inverse_kin(p[.326011149818, .479266965763, -.092696441938, .607580201479, -1.486765742709, -.628693747213], qnear=[-2.352646186957993, -0.4319644455261038, 0.7324943443557792, -0.2993818855919095, -0.7637422170693524, 0.7808392726056566]), a=1.3962634015954636, v=1.0471975511965976)
    $ 167 "pinz_col_up" "breakAfter"
    set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
    movej(get_inverse_kin(p[.325773376452, .462541498178, -.115348522022, -.212830907045, -1.559527738623, .190774615997], qnear=[-2.315612856541769, 0.07367491722106934, 0.2532482147216797, -0.32667285600771123, -0.7280772368060511, 1.8294758796691895]), a=1.3962634015954636, v=1.0471975511965976)
    $ 168 "pinz_col_in1" "breakAfter"
    set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
    movej(get_inverse_kin(p[.325228485012, .420094452856, -.158164992148, -.212714909125, -1.559567808483, .190626999186], qnear=[-2.353227202092306, -0.00873881975282842, 0.5550780296325684, -0.5463479200946253, -0.7649119536029261, 1.8297035694122314]), a=1.3962634015954636, v=1.0471975511965976)
    $ 170 "pinz_col_out" "breakAfter"
    set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
    movej(get_inverse_kin(p[.325373016983, .428558746253, -.163725468411, -.212596130254, -1.559581959634, .190676777215], qnear=[-2.3454745451556605, 0.03327763080596924, 0.4766983985900879, -0.5099824110614222, -0.7574675718890589, 1.8296436071395874]), a=1.3962634015954636, v=1.0471975511965976)
    $ 172 "Punto_percors_2" "breakAfter"
    set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
    movej(get_inverse_kin(p[.326040299518, .480900502235, -.148452817879, .402894540188, -1.534844754033, -.425850166899], qnear=[-2.321592632924215, -0.2006920019732874, 0.511988639831543, -0.3106725851642054, -0.7324641386615198, 1.043330192565918]), a=1.3962634015954636, v=1.0471975511965976)
    $ 174 "tcp_pinza_s" "breakAfter"
    set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
    movej(get_inverse_kin(p[.326011149818, .479266965763, -.092696441938, .607580201479, -1.486765742709, -.628693747213], qnear=[-2.352646186957993, -0.4319644455261038, 0.7324943443557792, -0.2993818855919095, -0.7637422170693524, 0.7808392726056566]), a=1.3962634015954636, v=1.0471975511965976)
  end
  def dosa_ades_col():
    $ 175 "dosa_ades_col" "noBreak"
    $ 176 "MoveJ"
    $ 177 "tcp_coll_s" "breakAfter"
    set_tcp(p[0.0,0.0,0.2,0.0,0.0,0.5236])
    movej(get_inverse_kin(p[.326049273399, .390335697988, -.058732848056, 1.507272008701, -2.645215517466, .202790049416], qnear=[-2.4247244040118616, -1.2219765822040003, 1.938539981842041, -2.1700642744647425, -1.6807735602008265, 0.7407760620117188]), a=1.3962634015954636, v=1.0471975511965976)
    $ 178 "Punto_percors_7" "breakAfter"
    set_tcp(p[0.0,0.0,0.2,0.0,0.0,0.5236])
    movej(get_inverse_kin(p[.326116852290, .395016199059, -.120075426115, 1.507153731563, -2.645294954726, .202786700592], qnear=[-2.418325964604513, -1.1042702833758753, 1.9716458320617676, -2.3201311270343226, -1.680725399647848, 0.7476186752319336]), a=1.3962634015954636, v=1.0471975511965976)
    $ 179 "Punto_percors_8" "breakAfter"
    set_tcp(p[0.0,0.0,0.2,0.0,0.0,0.5236])
    movej(get_inverse_kin(p[.326087296439, .391560725673, -.129594316531, 1.507254474525, -2.645262159269, .202782320124], qnear=[-2.4231184164630335, -1.0899871031390589, 1.9846491813659668, -2.3479674498187464, -1.681396786366598, 0.742812991142273]), a=1.3962634015954636, v=1.0471975511965976)
    $ 180 "MoveL"
    $ 181 "Punto_percors_8" "breakAfter"
    set_tcp(p[0.0,0.0,0.2,0.0,0.0,0.5236])
    movel(p[.326087296439, .391560725673, -.129594316531, 1.507254474525, -2.645262159269, .202782320124], a=1.2, v=0.25)
    $ 182 "arco01" "breakAfter"
    set_tcp(p[0.0,0.0,0.2,0.0,0.0,0.5236])
    movel(p[.314979692587, .396609864829, -.132865487706, -1.422169430917, 2.364493150158, -.968087561031], a=1.2, v=0.25)
    $ 183 "Set DO_dosaOnOff=On"
    set_standard_digital_out(2, True)
    $ 184 "Wait: 0.5"
    sleep(0.5)
    $ 185 "Punto_percors_8" "breakAfter"
    set_tcp(p[0.0,0.0,0.2,0.0,0.0,0.5236])
    movel(p[.326087296439, .391560725673, -.129594316531, 1.507254474525, -2.645262159269, .202782320124], a=1.2, v=0.25)
    $ 186 "Set DO_dosaOnOff=Off"
    set_standard_digital_out(2, False)
    $ 187 "MoveJ"
    $ 188 "tcp_coll_s" "breakAfter"
    set_tcp(p[0.0,0.0,0.2,0.0,0.0,0.5236])
    movej(get_inverse_kin(p[.326049273399, .390335697988, -.058732848056, 1.507272008701, -2.645215517466, .202790049416], qnear=[-2.4247244040118616, -1.2219765822040003, 1.938539981842041, -2.1700642744647425, -1.6807735602008265, 0.7407760620117188]), a=1.3962634015954636, v=1.0471975511965976, r=0.005)
  end
  def pressa_nfc_col():
    $ 189 "pressa_nfc_col" "noBreak"
    $ 190 "MoveJ"
    $ 192 "tcp_pressa_s" "breakAfter"
    set_tcp(p[-0.14289,-0.0825,0.045,0.0,0.0,0.0])
    movej(get_inverse_kin(p[.324298787378, .291030789818, .176510647959, -1.401248626008, -1.064331206528, 1.385677224284], qnear=[-2.5951226393329065, -0.8143609205829065, 1.4839162826538086, -0.6680591742144983, -1.0046327749835413, -2.8845837751971644]), a=1.3962634015954636, v=1.0471975511965976)
    $ 193 "Punto_percor_11" "breakAfter"
    set_tcp(p[-0.14289,-0.0825,0.045,0.0,0.0,0.0])
    movej(get_inverse_kin(p[.324225434931, .296228122056, .067341178565, -1.396925760612, -1.051729655906, 1.384335823031], qnear=[-2.5894325415240687, -0.6285126844989222, 1.4779891967773438, -0.8382156530963343, -0.9903581778155726, -2.8891623655902308]), a=1.3962634015954636, v=1.0471975511965976)
    $ 194 "Wait: 5.0"
    sleep(5.0)
    $ 195 "tcp_pressa_s" "breakAfter"
    set_tcp(p[-0.14289,-0.0825,0.045,0.0,0.0,0.0])
    movej(get_inverse_kin(p[.324298787378, .291030789818, .176510647959, -1.401248626008, -1.064331206528, 1.385677224284], qnear=[-2.5951226393329065, -0.8143609205829065, 1.4839162826538086, -0.6680591742144983, -1.0046327749835413, -2.8845837751971644]), a=1.3962634015954636, v=1.0471975511965976)
    $ 196 "MoveJ"
    $ 197 "tcp_pinza_s" "breakAfter"
    set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
    movej(get_inverse_kin(p[.326011149818, .479266965763, -.092696441938, .607580201479, -1.486765742709, -.628693747213], qnear=[-2.352646186957993, -0.4319644455261038, 0.7324943443557792, -0.2993818855919095, -0.7637422170693524, 0.7808392726056566]), a=1.3962634015954636, v=1.0471975511965976)
    $ 198 "pinz_col_up" "breakAfter"
    set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
    movej(get_inverse_kin(p[.325773376452, .462541498178, -.115348522022, -.212830907045, -1.559527738623, .190774615997], qnear=[-2.315612856541769, 0.07367491722106934, 0.2532482147216797, -0.32667285600771123, -0.7280772368060511, 1.8294758796691895]), a=1.3962634015954636, v=1.0471975511965976)
    $ 199 "pinz_col_out" "breakAfter"
    set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
    movej(get_inverse_kin(p[.325373016983, .428558746253, -.163725468411, -.212596130254, -1.559581959634, .190676777215], qnear=[-2.3454745451556605, 0.03327763080596924, 0.4766983985900879, -0.5099824110614222, -0.7574675718890589, 1.8296436071395874]), a=1.3962634015954636, v=1.0471975511965976)
    $ 200 "pinz_col_in" "breakAfter"
    set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
    movej(get_inverse_kin(p[.325231644324, .416122322000, -.162783956222, -.212521736848, -1.559575625607, .190421343811], qnear=[-2.3569420019732874, -0.010176006947652638, 0.572056770324707, -0.56189471880068, -0.7685793081866663, 1.8294758796691895]), a=1.3962634015954636, v=1.0471975511965976)
    $ 202 "pinz_col_up" "breakAfter"
    set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
    movej(get_inverse_kin(p[.325773376452, .462541498178, -.115348522022, -.212830907045, -1.559527738623, .190774615997], qnear=[-2.315612856541769, 0.07367491722106934, 0.2532482147216797, -0.32667285600771123, -0.7280772368060511, 1.8294758796691895]), a=1.3962634015954636, v=1.0471975511965976)
    $ 206 "tcp_pinza_s" "breakAfter"
    set_tcp(p[-0.005,-0.205,0.046,0.0,0.0,0.0])
    movej(get_inverse_kin(p[.326011149818, .479266965763, -.092696441938, .607580201479, -1.486765742709, -.628693747213], qnear=[-2.352646186957993, -0.4319644455261038, 0.7324943443557792, -0.2993818855919095, -0.7637422170693524, 0.7808392726056566]), a=1.3962634015954636, v=1.0471975511965976)
  end
  $ 2 "BeforeStart"
  $ 3 "Script: calc_pose_to_position.script"
  def calc_pose_to_position(pose, feature, position):
  
     PoseRelativeToFeature = pose_trans(pose_inv(feature), pose)
  
     diff = pose_sub(position, PoseRelativeToFeature)
     vect = p[diff[0], diff[1], diff[2], 0, 0, 0]
  
     MoveTCPRelativeToFeature = pose_add(PoseRelativeToFeature, vect)
     return pose_trans(feature, MoveTCPRelativeToFeature)
  
  end
  $ 4 "Script: calc_item_position.script"
  def calc_item_position(item, prop, grid, module, seat, compens):
  
      # calcola la posizione assoluta del pezzo scelto da pickPalletItem
  
      # nPosX è il numero di colonne
      # nPosY è il numero di righe
      # distX è la distanza tra colonne
      # distY è la distanza tra righe
      # [posX1, posY1] è la posizione del primo pezzo rispetto all'origine del pallet
  
      nPallet = module # module e seat partono da 1
      nItem = seat
  
      nPosXgrid = grid[0] # numero di posizioni della giglia in X
      distXgrid = grid[2] # distanza tra gli slot della griglia in X
      distYgrid = grid[3] # distanza tra gli slot della griglia in Y
  
      pallPosX = nPallet%nPosXgrid
      if(pallPosX==0): pallPosX = nPosXgrid end
      pallPosY = ceil(nPallet/nPosXgrid)
  
      pallPosX1 = grid[4]
      pallPosY1 = grid[5]
  
  
      nPosX = prop[item,0]
      nPosY = prop[item,1]
      distX = prop[item,2]
      distY = prop[item,3]
      posX1 = prop[item,4]
      posY1 = prop[item,5]
  
      posX = nItem%nPosX
      if(posX==0): posX = nPosX end
      posY = ceil(nItem/nPosX)
  
      position = p[0,0,0,0,0,0]
  
      X=distX*(posX - 1) + posX1 + distXgrid*(pallPosX - 1) + pallPosX1 + compens[0]*1000
      Y=distY*(posY - 1) + posY1 + distYgrid*(pallPosY - 1) + pallPosY1 + compens[1]*1000
  
      position[0] = X/1000
      position[1] = Y/1000
  
      return position
  
   end
  $ 5 "Script: calc_compens_pos.script"
  def calc_compens_pos(item, prop, grid, module, feature, posAppr):
  
  	compens = p[0,0,0,0,0,0]
  	posPred = calc_item_position(item, prop, grid, module, 1, compens)
  
  	posApprFeat = pose_trans(pose_inv(feature), posAppr)
  	diff = pose_sub(posApprFeat - posPred)
  
  	compens[0] = diff[0]
  	compens[1] = diff[1]
  
  	return compens
  
  end
  $ 6 "Script: tcpMov.script"
  def tcpMov(vect):
  
      # FeaturePose is the pose for the feature
      # vect = p[0.1, 0, 0, 0, 0, 0] makes us move 10cm in the X direction of the feature
      # credits: https://forum.universal-robots.com/t/move-tcp-relative-to-feature/15492
  
     tcp_pose = get_actual_tcp_pose()
     return pose_add(tcp_pose, vect)
  
  
  end
  $ 7 "Script: gen_tcp_grid.script"
  def next_tcp_grid_pos(cur_pos,size,dist):
  
  # size e' la dimensione della griglia da generare,
  # 2 significa 2x2, 3 significa 3x3 etc
  
  rel_p = [0,0]
  tcpp = get_actual_tcp_pose()
  
  posX = cur_pos%size
  if(posX==0): posX = size end
  posY = ceil(cur_pos/size)
  
  actual_dx = -dist*(size-1)/2 + (posX-1)*dist
  actual_dy= -dist*(size-1)/2 + (posY-1)*dist
  
  posX = (cur_pos+1)%size
  if(posX==0): posX = size end
  posY = ceil((cur_pos+1)/size)
  
  next_dx = -dist*(size-1)/2 + (posX-1)*dist
  next_dy= -dist*(size-1)/2 + (posY-1)*dist
  
  rel_p = [next_dx - actual_dx, next_dy - actual_dy]
  
  return rel_p
  
  end
  $ 8 "Script: stockUpdate.script_bak"
  def stockUpdate(pick,stock):
  
      # simple function that ingests the output of pickItem and returns the
      # modified stock array. just so to avoid using global variables and
      # multi-dimensional arrays
  
      i = pick[0]
      stock[i] = stock[i] - 1
      return stock
  
  
  end
  $ 9 "Script: pickPalletItem.script"
  def pickPalletItem(type, pallDefs, pallTypes, pallStocks):
  
    # seleziona un pezzo sulla griglia, noti il tipo di pezzo e lo stato della griglia
  
    # lo script funziona finché le variabili del robot non vengono resettate. Tuttavia, anche
    # in caso di riavvio, è possibile scrivere manualmente le info sulla griglia e lo stock
    # all'inizio del programma, così da 'insegnare' al robot dove farlo
    # riprendere
  
    iPallet = 0 # inizializzo l'id del pallet
  
    while iPallet < length(pallStocks):
  
      if pallTypes[iPallet] == type and pallStocks[iPallet] > 0 :
  
        nItems = pallStocks[iPallet] # numero di pezzi nello stock del pallet iesimo
  
        nPosX = pallDefs[type,0] # numero di posizioni lungo x, come definito per il pallet di tipo "type"
        nPosY = pallDefs[type,1] # numero di posizioni lungo y, come definito per il pallet di tipo "type"
  
        stockMax = nPosX*nPosY
        iItem = stockMax - nItems # id del pezzo
  
        pick = [iPallet,iItem]
  
        # pick = [id del pallet, id del pezzo]
  
        return pick
   end
  iPallet = iPallet + 1
  end
  end
  $ 10 "Script: ini_grid.script"
  def ini_grid():
  
      # grid = [nPallPosX, nPallPosY, distPallX, distPallY, pallPosX1, pallPosY1, pallPosZ1]
      # la struttura e' del tutto analoga in logica con quella espressa in defs
      grid = [4, 6, 90, 90, 10, 20, 6]
      return grid
  end
  $ 11 "Script: ini_defs.script"
  chp = 1
  ghr = 2
  
  def ini_defs():
  
      # definition = [nPosX,nPosY,distX,distY,posX1,posY1,posZ1]
  
      # nPosX è il numero di colonne
      # nPosY è il numero di righe
      # distX è la distanza tra colonne
      # distY è la distanza tra righe
      # [posX1, posY1] è la posizione del primo pezzo rispetto all'origine del pallet
      # posZ1 e' la posizione che deve raggiungere il TCP lungo asse Z, che sarebbe asse verticale
  
      defs = [
          [0, 0, 0, 0, 0, 0, 0], # slot vuoto
          [4, 10, 18, 8, 17, 10.3, 10], # pallet chip
          [4, 4, 21, 21, 12.5, 12.5, 50], # pallet ghiere
          [1, 1, 0, 0, 132.06, 44, 16.05], # stazione antenna
          [1, 2, 0, 40, 20.256, 24, 27.85], # stazione incollaggio
          [1, 1, 0, 0, 40, 40, 50] # cestino
      ]
      return defs
  end
  $ 12 "Script: ini_types.script_bak_bak"
  def ini_types():
  
      visualTypes = [
  
          [0, 0, 0, 0],
          [0, 0, 0, 0],
          [0,0,0,0],
          [0,0,0,0],
          [0,ghr,0,chp],
          [0,0,0,0]
  
      ]
  
  # purtroppo fare questa array vuota di dimensione (righe)x(colonne) per aggirare le limitazioni di UR
  # bisogna ricordarsi di cambiare questa dichiarazione di types se si cambia dimensione griglia
  
       types = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
  
      iii = 0
      s = size(visualTypes)
      i = 0
      while i < s[0]:
  
          ii=0
          while ii < s[1]:
  
              types[iii] = visualTypes[s[0]-1-i,ii]
              ii = ii + 1
              iii = iii + 1
          end
      i = i + 1
      end
      return types
  end
  $ 13 "Script: ini_stocks.script"
  def ini_stocks(defs, types):
  
      global f = -1 # usa questo carattere per inizializzare automaticamente pallet pieni
  
      visualStocks = [
  
          [f, f, f, f],
          [f, f, f, f],
          [f, f, f, f],
          [f, f, f, f],
          [f, f, f, f],
          [f ,f, f, f]
  
      ]
  
  # purtroppo occorre fare questa array vuota di dimensione (righe)x(colonne) per aggirare le limitazioni di UR
  # bisogna ricordarsi di cambiare questa dichiarazione di types se si cambia dimensione griglia
  
       stocks = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
  
      iii = 0
      s = size(visualStocks)
      i = 0
      while i < s[0]:
  
          ii=0
          while ii < s[1]:
              if visualStocks[s[0]-1-i,ii] == f:
                  nPosX = defs[types[iii], 0]
                  nPosY = defs[types[iii], 1]
                  stocks[iii] = nPosX*nPosY
              else:
  
                  stocks[iii] = visualStocks[s[0]-1-i,ii]
              end
              ii = ii + 1
              iii = iii + 1
          end
      i = i + 1
      end
      return stocks
  end
  $ 14 "Script: fun_tens_utensile.script"
  def fun_tens_utensile():
  
  	i = 0
  	# invia 3 "impulsi" alla macchina per assicurarsi che il tool abbia tensione
  	while i < 3:
  		set_tool_voltage(24)
  		sleep(0.24)
  		i = i + 1
  	end
  
  end
  $ 15 "posApproccio≔get_actual_tcp_pose()"
  global posApproccio= get_actual_tcp_pose ()
  $ 16 "statoPinza≔0"
  global statoPinza=0
  $ 17 "statoGhiera≔0"
  global statoGhiera=0
  $ 18 "statoChip≔0"
  global statoChip=0
  $ 19 "compens≔p[0,0,0,0,0,0]"
  global compens=p[0,0,0,0,0,0]
  $ 20 "Set DO_ventosaOff=On"
  set_standard_digital_out(1, True)
  $ 21 "Set DO_ventosaOn=Off"
  set_standard_digital_out(0, False)
  $ 22 "Set DO_dosaOnOff=Off"
  set_standard_digital_out(2, False)
  $ 23 "pallTypes≔ini_types()"
  global pallTypes=ini_types()
  $ 24 "bypassVerifChp≔ False "
  global bypassVerifChp=  False  
  $ 25 "grid≔ini_grid()"
  global grid=ini_grid()
  $ 26 "pallDefs≔ini_defs()"
  global pallDefs=ini_defs()
  $ 27 "pallStocks≔ini_stocks(pallDefs,pallTypes)"
  global pallStocks=ini_stocks(pallDefs,pallTypes)
  $ 28 "nCycle≔1"
  global nCycle=1
  $ 29 "chp_check≔ False "
  global chp_check=  False  
  $ 30 "fun_tens_utensile()"
  fun_tens_utensile()
  $ 31 "Wait: 1.0"
  sleep(1.0)
  $ 60 "Thread_1"
  thread Thread_1():
    while (True):
      $ 61 "If timer_1>4"
      if (timer_1>4):
        $ 62 "timer_1: Reset"
        timer_1 = 0
        $ 63 "fun_tens_utensile()"
        fun_tens_utensile()
        $ 64 "timer_1: Start"
        timer_1_is_counting = True
      end
    end
  end
  threadId_Thread_1 = run Thread_1()
  while (True):
    $ 32 "Robot Program"
    $ 33 "MoveJ"
    $ 34 "Waypoint_7" "breakAfter"
    movej(get_inverse_kin(p[.321623178179, .412074644841, -.071725109157, 1.583066401634, -2.482155506445, .126837083744], qnear=[-2.4144793192492884, -1.1381238142596644, 1.8338615894317627, -2.0602720419513147, -1.624234978352682, 0.6443699598312378]), a=1.3962634015954636, v=1.0471975511965976)
    $ 35 "timer_1: Start"
    timer_1_is_counting = True
    $ 36 "apprendimento≔ True "
    global apprendimento=  True  
    $ 37 "item≔ghr"
    global item=ghr
    $ 38 "pick≔pickPalletItem(item,pallDefs,pallTypes,pallStocks)"
    global pick=pickPalletItem(item,pallDefs,pallTypes,pallStocks)
    $ 39 "lastpick≔pick"
    global lastpick=pick
    $ 40 "Call prel_ghr_pall"
    prel_ghr_pall()
    $ 41 "statoGhiera≔1"
    global statoGhiera=1
    $ 42 "Call depo_ghr_col"
    depo_ghr_col()
    $ 43 "statoGhiera≔2"
    global statoGhiera=2
    $ 44 "chp_check≔ False "
    global chp_check=  False  
    $ 45 "Loop chp_check≟ False "
    while (chp_check ==   False  ):
      $ 46 "item≔chp"
      global item=chp
      $ 47 "pick≔pickPalletItem(item,pallDefs,pallTypes,pallStocks)"
      global pick=pickPalletItem(item,pallDefs,pallTypes,pallStocks)
      $ 48 "Call prel_chp_pall"
      prel_chp_pall()
      $ 49 "statoChip≔1"
      global statoChip=1
      $ 50 "pallStocks≔stockUpdate(pick,pallStocks)"
      global pallStocks=stockUpdate(pick,pallStocks)
      $ 51 "MoveJ"
      $ 52 "Punto_percors_1" "breakAfter"
      set_tcp(p[0.0475,0.0,0.045,0.0,0.0,0.0])
      movej(get_inverse_kin(p[.331541025423, .425448581379, -.023300967071, 1.762110018309, -.739780351948, -1.772643892872], qnear=[-2.5320609251605433, -0.6660645643817347, 1.3469347953796387, -0.6796024481402796, -0.941779915486471, -0.7899144331561487]), a=1.3962634015954636, v=1.0471975511965976)
      $ 53 "Call seq_chp_ant"
      seq_chp_ant()
      $ 54 "If chp_check≟ True "
      if (chp_check ==   True  ):
        $ 55 "Call dosa_ades_col"
        dosa_ades_col()
        $ 56 "Call pressa_nfc_col"
        pressa_nfc_col()
        $ 57 "Call prel_ghr_col"
        prel_ghr_col()
      else:
        $ 58 "Else" "noBreak"
        $ 59 "Call depo_chp_pal"
        depo_chp_pal()
      end
    end
  end
end
